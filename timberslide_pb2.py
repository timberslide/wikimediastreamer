# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: timberslide.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='timberslide.proto',
  package='ts',
  syntax='proto3',
  serialized_pb=_b('\n\x11timberslide.proto\x12\x02ts\"5\n\x05\x45vent\x12\r\n\x05Topic\x18\x01 \x01(\t\x12\x0f\n\x07Message\x18\x02 \x01(\t\x12\x0c\n\x04\x44one\x18\x03 \x01(\x08\"\x0c\n\nEventReply\"3\n\x05Topic\x12\n\n\x02ID\x18\x01 \x01(\x03\x12\x0c\n\x04Name\x18\x02 \x01(\t\x12\x10\n\x08Position\x18\x03 \x01(\x03\"\'\n\x08Register\x12\r\n\x05Topic\x18\x01 \x01(\t\x12\x0c\n\x04User\x18\x02 \x01(\t\"\x0f\n\rRegisterReply\"\x0b\n\tTopicsReq\"(\n\x0bTopicsReply\x12\x19\n\x06topics\x18\x01 \x03(\x0b\x32\t.ts.Topic29\n\x06Ingest\x12/\n\x0cStreamEvents\x12\t.ts.Event\x1a\x0e.ts.EventReply\"\x00(\x01\x30\x01\x32\x31\n\x08Streamer\x12%\n\tGetStream\x12\t.ts.Topic\x1a\t.ts.Event\"\x00\x30\x01\x32k\n\x06Topics\x12\x32\n\rregisterTopic\x12\x0c.ts.Register\x1a\x11.ts.RegisterReply\"\x00\x12-\n\tgetTopics\x12\r.ts.TopicsReq\x1a\x0f.ts.TopicsReply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_EVENT = _descriptor.Descriptor(
  name='Event',
  full_name='ts.Event',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='Topic', full_name='ts.Event.Topic', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='Message', full_name='ts.Event.Message', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='Done', full_name='ts.Event.Done', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=25,
  serialized_end=78,
)


_EVENTREPLY = _descriptor.Descriptor(
  name='EventReply',
  full_name='ts.EventReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=80,
  serialized_end=92,
)


_TOPIC = _descriptor.Descriptor(
  name='Topic',
  full_name='ts.Topic',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ID', full_name='ts.Topic.ID', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='Name', full_name='ts.Topic.Name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='Position', full_name='ts.Topic.Position', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=94,
  serialized_end=145,
)


_REGISTER = _descriptor.Descriptor(
  name='Register',
  full_name='ts.Register',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='Topic', full_name='ts.Register.Topic', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='User', full_name='ts.Register.User', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=147,
  serialized_end=186,
)


_REGISTERREPLY = _descriptor.Descriptor(
  name='RegisterReply',
  full_name='ts.RegisterReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=188,
  serialized_end=203,
)


_TOPICSREQ = _descriptor.Descriptor(
  name='TopicsReq',
  full_name='ts.TopicsReq',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=205,
  serialized_end=216,
)


_TOPICSREPLY = _descriptor.Descriptor(
  name='TopicsReply',
  full_name='ts.TopicsReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='topics', full_name='ts.TopicsReply.topics', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=218,
  serialized_end=258,
)

_TOPICSREPLY.fields_by_name['topics'].message_type = _TOPIC
DESCRIPTOR.message_types_by_name['Event'] = _EVENT
DESCRIPTOR.message_types_by_name['EventReply'] = _EVENTREPLY
DESCRIPTOR.message_types_by_name['Topic'] = _TOPIC
DESCRIPTOR.message_types_by_name['Register'] = _REGISTER
DESCRIPTOR.message_types_by_name['RegisterReply'] = _REGISTERREPLY
DESCRIPTOR.message_types_by_name['TopicsReq'] = _TOPICSREQ
DESCRIPTOR.message_types_by_name['TopicsReply'] = _TOPICSREPLY

Event = _reflection.GeneratedProtocolMessageType('Event', (_message.Message,), dict(
  DESCRIPTOR = _EVENT,
  __module__ = 'timberslide_pb2'
  # @@protoc_insertion_point(class_scope:ts.Event)
  ))
_sym_db.RegisterMessage(Event)

EventReply = _reflection.GeneratedProtocolMessageType('EventReply', (_message.Message,), dict(
  DESCRIPTOR = _EVENTREPLY,
  __module__ = 'timberslide_pb2'
  # @@protoc_insertion_point(class_scope:ts.EventReply)
  ))
_sym_db.RegisterMessage(EventReply)

Topic = _reflection.GeneratedProtocolMessageType('Topic', (_message.Message,), dict(
  DESCRIPTOR = _TOPIC,
  __module__ = 'timberslide_pb2'
  # @@protoc_insertion_point(class_scope:ts.Topic)
  ))
_sym_db.RegisterMessage(Topic)

Register = _reflection.GeneratedProtocolMessageType('Register', (_message.Message,), dict(
  DESCRIPTOR = _REGISTER,
  __module__ = 'timberslide_pb2'
  # @@protoc_insertion_point(class_scope:ts.Register)
  ))
_sym_db.RegisterMessage(Register)

RegisterReply = _reflection.GeneratedProtocolMessageType('RegisterReply', (_message.Message,), dict(
  DESCRIPTOR = _REGISTERREPLY,
  __module__ = 'timberslide_pb2'
  # @@protoc_insertion_point(class_scope:ts.RegisterReply)
  ))
_sym_db.RegisterMessage(RegisterReply)

TopicsReq = _reflection.GeneratedProtocolMessageType('TopicsReq', (_message.Message,), dict(
  DESCRIPTOR = _TOPICSREQ,
  __module__ = 'timberslide_pb2'
  # @@protoc_insertion_point(class_scope:ts.TopicsReq)
  ))
_sym_db.RegisterMessage(TopicsReq)

TopicsReply = _reflection.GeneratedProtocolMessageType('TopicsReply', (_message.Message,), dict(
  DESCRIPTOR = _TOPICSREPLY,
  __module__ = 'timberslide_pb2'
  # @@protoc_insertion_point(class_scope:ts.TopicsReply)
  ))
_sym_db.RegisterMessage(TopicsReply)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class IngestStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StreamEvents = channel.stream_stream(
        '/ts.Ingest/StreamEvents',
        request_serializer=Event.SerializeToString,
        response_deserializer=EventReply.FromString,
        )


class IngestServicer(object):

  def StreamEvents(self, request_iterator, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_IngestServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StreamEvents': grpc.stream_stream_rpc_method_handler(
          servicer.StreamEvents,
          request_deserializer=Event.FromString,
          response_serializer=EventReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ts.Ingest', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaIngestServicer(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  def StreamEvents(self, request_iterator, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaIngestStub(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  def StreamEvents(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()


def beta_create_Ingest_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_deserializers = {
    ('ts.Ingest', 'StreamEvents'): Event.FromString,
  }
  response_serializers = {
    ('ts.Ingest', 'StreamEvents'): EventReply.SerializeToString,
  }
  method_implementations = {
    ('ts.Ingest', 'StreamEvents'): face_utilities.stream_stream_inline(servicer.StreamEvents),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Ingest_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_serializers = {
    ('ts.Ingest', 'StreamEvents'): Event.SerializeToString,
  }
  response_deserializers = {
    ('ts.Ingest', 'StreamEvents'): EventReply.FromString,
  }
  cardinalities = {
    'StreamEvents': cardinality.Cardinality.STREAM_STREAM,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'ts.Ingest', cardinalities, options=stub_options)


class StreamerStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetStream = channel.unary_stream(
        '/ts.Streamer/GetStream',
        request_serializer=Topic.SerializeToString,
        response_deserializer=Event.FromString,
        )


class StreamerServicer(object):

  def GetStream(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StreamerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetStream': grpc.unary_stream_rpc_method_handler(
          servicer.GetStream,
          request_deserializer=Topic.FromString,
          response_serializer=Event.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ts.Streamer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaStreamerServicer(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  def GetStream(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaStreamerStub(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  def GetStream(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()


def beta_create_Streamer_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_deserializers = {
    ('ts.Streamer', 'GetStream'): Topic.FromString,
  }
  response_serializers = {
    ('ts.Streamer', 'GetStream'): Event.SerializeToString,
  }
  method_implementations = {
    ('ts.Streamer', 'GetStream'): face_utilities.unary_stream_inline(servicer.GetStream),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Streamer_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_serializers = {
    ('ts.Streamer', 'GetStream'): Topic.SerializeToString,
  }
  response_deserializers = {
    ('ts.Streamer', 'GetStream'): Event.FromString,
  }
  cardinalities = {
    'GetStream': cardinality.Cardinality.UNARY_STREAM,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'ts.Streamer', cardinalities, options=stub_options)


class TopicsStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.registerTopic = channel.unary_unary(
        '/ts.Topics/registerTopic',
        request_serializer=Register.SerializeToString,
        response_deserializer=RegisterReply.FromString,
        )
    self.getTopics = channel.unary_unary(
        '/ts.Topics/getTopics',
        request_serializer=TopicsReq.SerializeToString,
        response_deserializer=TopicsReply.FromString,
        )


class TopicsServicer(object):

  def registerTopic(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getTopics(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TopicsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'registerTopic': grpc.unary_unary_rpc_method_handler(
          servicer.registerTopic,
          request_deserializer=Register.FromString,
          response_serializer=RegisterReply.SerializeToString,
      ),
      'getTopics': grpc.unary_unary_rpc_method_handler(
          servicer.getTopics,
          request_deserializer=TopicsReq.FromString,
          response_serializer=TopicsReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ts.Topics', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaTopicsServicer(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  def registerTopic(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def getTopics(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaTopicsStub(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  def registerTopic(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  registerTopic.future = None
  def getTopics(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  getTopics.future = None


def beta_create_Topics_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_deserializers = {
    ('ts.Topics', 'getTopics'): TopicsReq.FromString,
    ('ts.Topics', 'registerTopic'): Register.FromString,
  }
  response_serializers = {
    ('ts.Topics', 'getTopics'): TopicsReply.SerializeToString,
    ('ts.Topics', 'registerTopic'): RegisterReply.SerializeToString,
  }
  method_implementations = {
    ('ts.Topics', 'getTopics'): face_utilities.unary_unary_inline(servicer.getTopics),
    ('ts.Topics', 'registerTopic'): face_utilities.unary_unary_inline(servicer.registerTopic),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Topics_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_serializers = {
    ('ts.Topics', 'getTopics'): TopicsReq.SerializeToString,
    ('ts.Topics', 'registerTopic'): Register.SerializeToString,
  }
  response_deserializers = {
    ('ts.Topics', 'getTopics'): TopicsReply.FromString,
    ('ts.Topics', 'registerTopic'): RegisterReply.FromString,
  }
  cardinalities = {
    'getTopics': cardinality.Cardinality.UNARY_UNARY,
    'registerTopic': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'ts.Topics', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
